import MetaTrader5 as mt5
import pandas as pd
import numpy as np
import telegram
from datetime import datetime
import time
from enum import Enum

bot = telegram.Bot(token='1777249819:AAGiRaYqHVTCwYZMGkjEv6guQ1g3NN9LOGo')


class Volatility(Enum):
    high = 1
    low = 0

class Side(Enum):
    buy = 1
    sell = 2
    

class Symbol():
    def __init__(self, symbol:str):

        self.name = symbol

        self.cusum_threshold_h = 0.225
        self.cusum_threshold_l = 0.125        
        self.grad_h4 = pd.Series(dtype=np.float64)
        self.grad_d1 = pd.Series(dtype=np.float64)
        self.d1_ohlc = pd.DataFrame()
        self.h4_ohlc = pd.DataFrame()
        self.m1_ohlc = pd.DataFrame()
        self.volatility = Volatility
        self.tp_mult = 0.65
        self.sl_mult = 0.65

        # Used for entry signal
        self.neg_tick_l = 0
        self.pos_tick_l = 0
        self.neg_tick_h = 0
        self.pos_tick_h = 0
        self.cusum_pos_h = 0
        self.cusum_pos_l = 0
        self.cusum_neg_h = 0
        self.cusum_neg_l = 0
        self.prev_price = 0

        self.fast_grad_h4 = 0
        self.slow_grad_h4 = 0

        self.bid = 0
        self.ask = 0
        self.sl = 0
        self.tp = 0
        self.spread = 0
        self.point = 0
        
        self.open_position = {}
        self.open_order = {}

    def _format_mt5_data(self, df):
        
        try:
            df = df.rename(columns={'time': 'datetime', 'tick_volume': 'volume'})
            df.datetime = pd.to_datetime(df.datetime, unit='s')
            df.datetime = df.datetime - pd.Timedelta('8 hours')
            df.index = df.datetime
            df = df[['open', 'high', 'low', 'close', 'volume']]
        except:
            print('Failed to format the dataframe:')
            print(df)

        return df

    def mt5_ohlc_request(self, symbol, timeframe, num_candles=150):
        ''' Get a formatted df from MT5 '''
                
        for _ in range(5):
            rates = mt5.copy_rates_from_pos(symbol, timeframe, 0, num_candles)  
            if rates is not None:
                if len(rates) > 0:
                    df = pd.DataFrame(rates)
                    df = self._format_mt5_data(df)
                    return df

        print(f'\n ~~~ Request to MT5 failed. [{symbol} {timeframe}] ~~~')
        return


    def set_volatility(self) -> None:
        """ Calculate and add the volatility column to self.d1_ohlc """

        self.d1_ohlc['av'] = (self.d1_ohlc['open'] +
                              self.d1_ohlc['close'] +
                              self.d1_ohlc['high'] +
                              self.d1_ohlc['low']
                              ) / 4
        self.d1_ohlc = self.d1_ohlc.dropna(axis=0, how='any')
        self.d1_ohlc['log'] = np.log(self.d1_ohlc['av'] / self.d1_ohlc['av'].shift(1))
        self.d1_ohlc['vol'] = self.d1_ohlc['log'].rolling(30).std() * 100
        self.d1_ohlc['rolling_vol'] = self.d1_ohlc['vol'].rolling(100).std() * 100

    def get_third_deriv(self, series: pd.Series, ema_period: int) -> pd.Series:
        """ Calculate gradients and return a smoothed series of the third deriv """

        ma = series.ewm(span=ema_period, adjust=False).mean()
        # Calculate slope
        ma_dydx = ma.diff() * 10000
        # Normalize
        ma_dydx = ma_dydx / series

        # Smooth gradients of ema's by taking ema of gradients
        ma_smooth = ma_dydx.ewm(span=ema_period, adjust=False).mean() * 10000

        # Calculate 2nd deriv from the smoothed gradient
        ma_2 = ma_smooth.diff()
        ma2_smooth = ma_2.ewm(span=ema_period, adjust=False).mean()

        # Calculate 3rd deriv from the smoothed gradient
        ma_3 = ma2_smooth.diff()
        ma3_smooth = ma_3.ewm(span=ema_period, adjust=False).mean()

        return ma3_smooth

    def get_cusum(self):
        # First reset the signals
        self.cusum_neg_h = 0
        self.cusum_neg_l = 0
        self.cusum_pos_h = 0
        self.cusum_pos_l = 0

        price_diff = self.m1_ohlc.close.diff().iloc[-1]
        vol = self.d1_ohlc.vol.iloc[-1]

        if price_diff > 0:
            self.pos_tick_l += price_diff
            self.pos_tick_h += price_diff

        elif price_diff < 0:
            self.neg_tick_l += price_diff
            self.neg_tick_h += price_diff

        if self.neg_tick_h < - self.cusum_threshold_h * vol:
            self.cusum_neg_h = 1
            self.neg_tick_h = 0

        if self.neg_tick_l < - self.cusum_threshold_l * vol:
            self.cusum_neg_l = 1
            self.neg_tick_l = 0

        if self.pos_tick_h > self.cusum_threshold_h * vol:
            self.cusum_pos_h = 1
            self.pos_tick_h = 0

        if self.pos_tick_h > self.cusum_threshold_l * vol:
            self.cusum_pos_l = 1
            self.pos_tick_l = 0
        
    def get_signal(self) -> Side:
        
        trade_signal = None

        if self.volatility == Volatility.high:
            cusum_pos = self.cusum_pos_h
            cusum_neg = self.cusum_neg_h

        else:
            cusum_pos = self.cusum_pos_l
            cusum_neg = self.cusum_neg_l

        # cusum negative signal, i.e dip && gradient3 4hour bias is Positive + gradient3 daily bias is Positive
        if cusum_neg == 1 and self.grad_h4.iloc[-1] > 0 and self.grad_d1.iloc[-1] > 0:
            trade_signal = Side.buy

        # cusum positive signal, i.e rally && gradient3 4hour bias is negative + gradient3 daily bias is negative
        elif cusum_pos == 1 and self.grad_h4.iloc[-1] < 0 and self.grad_d1.iloc[-1] < 0:
            trade_signal = Side.sell
        
        return trade_signal

    def set_entry_tp_sl(self, side: Side):
        
        if side == Side.buy:
            if self.d1_ohlc.vol.iloc[-1] > 0.07 * self.bid:
                self.tp = self.bid + self.tp_mult * self.d1_ohlc.vol.iloc[-1]
                self.sl = 0.93 * self.ask
            else:
                self.tp = self.bid + self.tp_mult * self.d1_ohlc.vol.iloc[-1]
                self.sl = self.ask - self.sl_mult * self.d1_ohlc.vol.iloc[-1]
            
            self.entry = self.bid

        if side == Side.sell:
            if self.d1_ohlc.vol.iloc[-1] > 0.07 * self.ask:
                self.tp = self.ask - self.tp_mult * self.d1_ohlc.vol.iloc[-1]
                self.sl = 1.07 * self.bid
            else:
                self.tp = self.ask - self.tp_mult * self.d1_ohlc.vo.ilocl[-1]
                self.sl = self.bid + self.sl_mult * self.d1_ohlc.vol.iloc[-1]

            self.entry = self.ask

        if (self.tp or self.sl) == 0:
            print(self.name,"sl and/or tp == 0. you got problems")

    def update_symbol_info(self):
        """spread, open orders, positions, w/e"""

        position = mt5.positions_get(symbol=self.name)
        if position:
            self.open_position = position.type

        info = mt5.symbol_info(self.name)._asdict()

        self.spread = info['spread'] * info['point']
        self.point = info['point']
        self.digits = info['digits']
        self.ask = info['ask']
        self.bid = info['bid']
        self.min_lot = info['volume_min']
        self.tick_value = info['trade_tick_value']
        self.time = info['time']

    def send_order(self, direction: Side):
        ''' Read from the df of current setups and set lot size based on 
        the forecast rating for the currencies in the symbol. '''

        # risk, trade_type = _increase_volume_if_forecast(df, i, symbol)
        type = mt5.ORDER_TYPE_BUY_LIMIT if direction == Side.buy else mt5.ORDER_TYPE_SELL_LIMIT

        request = {
            "action": mt5.TRADE_ACTION_PENDING,
            "symbol": self.name,
            "volume": self.lot_size,
            "price": self.entry,
            "sl": self.sl,
            "tp": self.tp, ### TP 1
            "deviation": 20,
            "magic": 234000,
            "comment": '', 
            "expiration": self.time + 60, # one minute
            "type": type,
            "type_time": mt5.ORDER_TIME_SPECIFIED,
            "type_filling": mt5.ORDER_FILLING_IOC,
        }
        
        result = mt5.order_send(request)
        if result is not None:
            if result.retcode != mt5.TRADE_RETCODE_DONE:
                # bot.send_message(chat_id=446051969, text=f'Entry failed: {self.name} {direction} {result.retcode}')
                print(f'~~~ order entry error {self.name} {result.retcode}')
        else:
            # bot.send_message(chat_id=446051969, text=f'Entry failed: {symbol} {timeframe} {direction}. "result" is None.')
            print(f'~~~ order entry error {self.name} "result" is none')

    def close_trade(self):
        if not mt5.Close(self.name):
            print(f'failed to close {self.name} position.')

    def set_lot_size(self, direction: Side) -> float:
        ''' Automatically set lot size based on desired risk %.
        Enter the risk % as a whole number ie 1% risk would be 1. '''

        risk = 0.01  # percentage

        # get the distance from entry to sl
        if direction == Side.buy:
            distance = round(self.entry_price - self.sl, self.digits)
        if direction == Side.sell:
            distance = round(self.sl - self.entry_price, self.digits)

        # Convert distance into number of points
        distance = round(distance / self.point, self.digits)

        # trade_tick_value gives the value for a standard lot for 1 point (min_tick) increment
        loss_with_1_lot = distance * self.tick_value
        risk_per_trade = risk * mt5.account_info().equity
        
        self.lot_size = round(risk_per_trade / loss_with_1_lot, 2)

    def spread_is_ok(self):

        if self.spread <= self.m1_ohlc[self.m1_ohlc.index.max(), 'atr'] * 1.25:
            return True

    def check_for_crossover(self):
        """If tp/sl is hit, or if there has been a crossover close the trade.
        This is executed in the on_bid_level_update callback"""
        
        # return if no position on that instrument
        if not self.open_position:
            return True 

        cross_long = self.grad_h4.iloc[-1] > 0 and self.grad_h4.iloc[-2] <= 0
        cross_short = self.grad_h4.iloc[-1] < 0 and self.grad_h4.iloc[-2] >= 0
        
        if self.open_position == mt5.POSITION_TYPE_BUY and cross_short:
            print(self.name, 'closing long because crossover')
            self.close_trade()
        
        if self.open_position == mt5.POSITION_TYPE_SELL and cross_long:
            print(self.name, 'closing short because crossover')
            self.close_trade()
        
        return False

# Init classes
EURUSD = Symbol('EURUSD.a')
GBPUSD = Symbol('GBPUSD.a')
USDCHF = Symbol('USDCHF.a')
USDJPY = Symbol('USDJPY.a')
USDCAD = Symbol('USDCAD.a')
AUDUSD = Symbol('AUDUSD.a')
AUDNZD = Symbol('AUDNZD.a')
AUDCAD = Symbol('AUDCAD.a')
AUDCHF = Symbol('AUDCHF.a')
AUDJPY = Symbol('AUDJPY.a')
CHFJPY = Symbol('CHFJPY.a')
EURGBP = Symbol('EURGBP.a')
EURAUD = Symbol('EURAUD.a')
EURCHF = Symbol('EURCHF.a')
EURJPY = Symbol('EURJPY.a')
EURNZD = Symbol('EURNZD.a')
EURCAD = Symbol('EURCAD.a')
GBPCHF = Symbol('GBPCHF.a')
GBPJPY = Symbol('GBPJPY.a')
CADCHF = Symbol('CADCHF.a')
CADJPY = Symbol('CADJPY.a')
GBPCAD = Symbol('GBPCAD.a')
GBPNZD = Symbol('GBPNZD.a')
NZDCAD = Symbol('NZDCAD.a')
NZDCHF = Symbol('NZDCHF.a')
NZDJPY = Symbol('NZDJPY.a')
NZDUSD = Symbol('NZDUSD.a')
BTCUSD = Symbol('BTCUSD.a')
BCHUSD = Symbol('BCHUSD.a')
ETHUSD = Symbol('ETHUSD.a')
LTCUSD = Symbol('LTCUSD.a')
XNGUSD = Symbol('XNGUSD.a')
XAGUSD = Symbol('XAGUSD.a')
XAUUSD = Symbol('XAUUSD.a')
DE30 = Symbol('DE30.a')
US30 = Symbol('US30.a')
US500 = Symbol('US500.a')
USTEC = Symbol('USTEC.a')

pairs = [
    EURUSD, GBPUSD, USDCHF,
    USDJPY,
    USDCAD,
    AUDUSD,
    AUDNZD,
    AUDCAD,
    AUDCHF,
    AUDJPY,
    CHFJPY,
    EURGBP,
    EURAUD,
    EURCHF,
    EURJPY,
    EURNZD,
    EURCAD,
    GBPCHF,
    GBPJPY,
    CADCHF,
    CADJPY,
    GBPCAD,
    GBPNZD,
    NZDCAD,
    NZDCHF,
    NZDJPY,
    NZDUSD,
    BTCUSD,
    BCHUSD,
    ETHUSD,
    LTCUSD,
    XNGUSD,
    XAGUSD,
    XAUUSD,
    DE30,
    US30,
    US500,
    USTEC,
]

def on_start():
    """init indi values"""
    for pair in pairs:
        
        pair.m1_ohlc = pair.mt5_ohlc_request(pair.name, mt5.TIMEFRAME_M1)
        pair.h4_ohlc = pair.mt5_ohlc_request(pair.name, mt5.TIMEFRAME_H4)
        pair.d1_ohlc = pair.mt5_ohlc_request(pair.name, mt5.TIMEFRAME_D1)
        pair.set_volatility()
        vol, rolling_vol = pair.d1_ohlc.vol.iloc[-1], pair.d1_ohlc.rolling_vol.iloc[-1]
        if vol <= rolling_vol:
            pair.volatility = Volatility.low
            pair.grad_h4 = pair.get_third_deriv(pair.h4_ohlc.close, 11)
            pair.grad_d1 = pair.get_third_deriv(pair.d1_ohlc.close, 11)
        else:
            pair.volatility = Volatility.high
            pair.grad_h4 = pair.get_third_deriv(pair.h4_ohlc.close, 9)
            pair.grad_d1 = pair.get_third_deriv(pair.d1_ohlc.close, 9)

        pair.get_cusum()

def main():

    current_time = datetime.now()
    if current_time.second == 0:
        for pair in pairs:

            pair.update_symbol_info()
            
            if len(pair.open_position) > 0:
                if not pair.check_for_crossover():
                    # open position not closed so skip to next pair
                    continue
                            
            # Get data2
            pair.m1_ohlc = pair.mt5_ohlc_request(pair.name, mt5.TIMEFRAME_M1)
            
            # only update the h4 values every 10mins, d1 every 30mins
            if current_time.minute % 10 == 0:
                pair.h4_ohlc = pair.mt5_ohlc_request(pair.name, mt5.TIMEFRAME_H4)
                pair.get_cusum()

            if current_time.minute % 30 == 0:
                pair.d1_ohlc = pair.mt5_ohlc_request(pair.name, mt5.TIMEFRAME_D1)
                pair.set_volatility()

                vol, rolling_vol = pair.d1_ohlc.vol.iloc[-1], pair.d1_ohlc.rolling_vol.iloc[-1]
                if vol <= rolling_vol:
                    pair.volatility = Volatility.low
                    pair.grad_h4 = pair.get_third_deriv(pair.h4_ohlc.close, 11)
                    pair.grad_d1 = pair.get_third_deriv(pair.d1_ohlc.close, 11)
                else:
                    pair.volatility = Volatility.high
                    pair.grad_h4 = pair.get_third_deriv(pair.h4_ohlc.close, 9)
                    pair.grad_d1 = pair.get_third_deriv(pair.d1_ohlc.close, 9)


            if not pair.spread_is_ok():
                print(f"spread {pair.spread} too high on", pair.name)
                continue

            signal = pair.get_signal()
            if not signal:
                continue

            pair.set_entry_tp_sl(signal)
            pair.set_lot_size(signal)
            
            if signal == Side.buy:
                pair.send_order(Side.buy)

            if signal == Side.sell:
                pair.send_order(Side.sell)

def connect():
    for _ in range(3):
        if not mt5.initialize():
            print("initialize() failed, error code =",mt5.last_error())
            quit()
        else:
            break

    authorized=mt5.login('50821307', password='5ZpgiBmt')  # the terminal database password is applied if connection data is set to be remembered
    
    for _ in range(3):
        if authorized:
            print("connected")
            break
        else:
            print("failed to connect")
            time.sleep(1)

if __name__ == '__main__':

 
    connect()
    on_start()
    while True:
        main()



